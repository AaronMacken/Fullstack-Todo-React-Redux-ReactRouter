{"ast":null,"code":"var _jsxFileName = \"/Users/aaronmacken/Desktop/react-redux-todos/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; // BrowserRouter - React router\n// createStore - Redux store \n// rootReducer - File created to handle redux state management logic\n// Provider - used to connect the react application to the redux store\n\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore } from 'redux'; // destructured version of: Redux.createStore \n\nimport rootReducer from './rootReducer';\nimport { Provider } from 'react-redux'; // create redux store using reducer file. Second param is for chrome dev tools\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nReactDOM.render( // pass into the provider component a store prop that uses our store const\n// by wrapping the app, any child component has access to the redux store\n// now all components will be able to dispatch actions, instead of only the \n// store being able to! (:\n// the browser router wrapps the application which is wrapped by the \n// provider\n// the provider is the top level component\nReact.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31\n  },\n  __self: this\n}, React.createElement(BrowserRouter, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33\n  },\n  __self: this\n}))), document.getElementById('root'));","map":{"version":3,"sources":["/Users/aaronmacken/Desktop/react-redux-todos/src/index.js"],"names":["React","ReactDOM","App","BrowserRouter","createStore","rootReducer","Provider","store","window","__REDUX_DEVTOOLS_EXTENSION__","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CAGA;AACA;AACA;AACA;;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,WAAT,QAA4B,OAA5B,C,CAAqC;;AACrC,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CAEA;;AACA,MAAMC,KAAK,GAAGH,WAAW,CAACC,WAAD,EACrBG,MAAM,CAACC,4BAAP,IAAuCD,MAAM,CAACC,4BAAP,EADlB,CAAzB;AAIAR,QAAQ,CAACS,MAAT,EACI;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEH,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADJ,CAVJ,EAgBMI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAhBN","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n// BrowserRouter - React router\n// createStore - Redux store \n// rootReducer - File created to handle redux state management logic\n// Provider - used to connect the react application to the redux store\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore } from 'redux'; // destructured version of: Redux.createStore \nimport rootReducer from './rootReducer';\nimport { Provider } from 'react-redux';\n\n// create redux store using reducer file. Second param is for chrome dev tools\nconst store = createStore(rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n\nReactDOM.render(\n    // pass into the provider component a store prop that uses our store const\n    // by wrapping the app, any child component has access to the redux store\n    // now all components will be able to dispatch actions, instead of only the \n    // store being able to! (:\n\n    // the browser router wrapps the application which is wrapped by the \n    // provider\n\n    // the provider is the top level component\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n\n    , document.getElementById('root'));\n"]},"metadata":{},"sourceType":"module"}