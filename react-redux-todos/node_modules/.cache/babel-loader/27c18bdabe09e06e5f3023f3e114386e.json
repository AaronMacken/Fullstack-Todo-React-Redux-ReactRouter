{"ast":null,"code":"var _jsxFileName = \"/Users/aaronmacken/Desktop/react-redux-todos/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; // BrowserRouter - React router\n// createStore - Redux store \n// applyMIddleware - allows us to use redux thunk middleware\n// compose - second param for createStore that uses applyMiddleware & then accepts the thunk as the middleware to use\n// rootReducer - File created to handle redux state management logic\n// Provider - used to connect the react application to the redux store\n// thunk allows us to write action creators that return functions for async code\n\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './rootReducer';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk'; // create redux store using reducer file.\n\nconst store = createStore(rootReducer, compose(applyMiddleware(thunk), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()));\nReactDOM.render( // the provider is the top level component\n// pass in store as a prop which is == to the redux store created above\n// child components can now dispatch actions to redux store\n// browser router wrapps the application to use react router\nReact.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33\n  },\n  __self: this\n}, React.createElement(BrowserRouter, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35\n  },\n  __self: this\n}))), document.getElementById('root'));","map":{"version":3,"sources":["/Users/aaronmacken/Desktop/react-redux-todos/src/index.js"],"names":["React","ReactDOM","App","BrowserRouter","createStore","applyMiddleware","compose","rootReducer","Provider","thunk","store","window","__REDUX_DEVTOOLS_EXTENSION__","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,aAAlB,C,CAEA;;AACA,MAAMC,KAAK,GAAGN,WAAW,CAACG,WAAD,EACrBD,OAAO,CACHD,eAAe,CAACI,KAAD,CADZ,EAEHE,MAAM,CAACC,4BAAP,IAAuCD,MAAM,CAACC,4BAAP,EAFpC,CADc,CAAzB;AAOAX,QAAQ,CAACY,MAAT,EACI;AACA;AACA;AACA;AACA,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEH,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADJ,CALJ,EAUMI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAVN","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n// BrowserRouter - React router\n// createStore - Redux store \n// applyMIddleware - allows us to use redux thunk middleware\n// compose - second param for createStore that uses applyMiddleware & then accepts the thunk as the middleware to use\n// rootReducer - File created to handle redux state management logic\n// Provider - used to connect the react application to the redux store\n// thunk allows us to write action creators that return functions for async code\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './rootReducer';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk'; \n\n// create redux store using reducer file.\nconst store = createStore(rootReducer,\n    compose(\n        applyMiddleware(thunk),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n    )\n    \n\nReactDOM.render(\n    // the provider is the top level component\n    // pass in store as a prop which is == to the redux store created above\n    // child components can now dispatch actions to redux store\n    // browser router wrapps the application to use react router\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n    , document.getElementById('root'));\n"]},"metadata":{},"sourceType":"module"}