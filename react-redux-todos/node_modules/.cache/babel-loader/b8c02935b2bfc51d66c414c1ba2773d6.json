{"ast":null,"code":"var _jsxFileName = \"/Users/aaronmacken/Desktop/react-redux-todos/src/TodoList.js\";\nimport React, { Component } from 'react';\nimport Todo from './Todo';\nimport NewTodoForm from './NewTodoForm';\nimport { Route } from 'react-router-dom'; // connect links together the react state & the redux store\n// get action calls from action creator file\n\nimport { connect } from 'react-redux';\nimport { addTodo, updateTodo, removeTodo, getTodos } from './actionCreator';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.handleAdd = this.handleAdd.bind(this);\n  } // dispatch calls that reach the redux store\n  // input values are used in the root reducer file to handle logic w/ managing the data\n\n\n  handleAdd(val) {\n    this.props.addTodo(val);\n  }\n\n  removeTodo(id) {\n    this.props.removeTodo(id);\n  }\n\n  updateTodo(todo) {\n    this.props.updateTodo(todo);\n  }\n\n  render() {\n    let todos = this.props.todos.map((e, ind) => // passing in removeTodo fn as a prop & binding it to the element that was rendered\n    // while also passing in the element's ID used in the FN\n    React.createElement(Todo, {\n      removeTodo: this.removeTodo.bind(this, e.id),\n      updateTodo: this.updateTodo.bind(this, e),\n      task: e.task,\n      key: ind,\n      completed: e.completed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/todos/new\",\n      component: props => React.createElement(NewTodoForm, Object.assign({}, props, {\n        handleSubmit: this.handleAdd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/todos\",\n      component: () => React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, todos)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }));\n  }\n\n} // must take in reduxState as a param and return an object\n// the name for the function is arbitrary, but it takes the redux state and maps it to our components props\n\n\nfunction mapStateToProps(reduxState) {\n  return {\n    todos: reduxState.todos\n  };\n} // connecting our component to the redux store defined on the index.js file\n// the REDUX STATE is now available as PROPS for this component\n// now the component has the ability to dispatch actions to the redux store\n// map dispatch to props FN is used for passing in actions for components to dispatch\n// now instead of calling this.props.dispatch and passing in an action,\n// the component has the ability to do: this.props.actionName to dispatch actions\n// the second param takes our actionCreator functions for functions that mapDispatchToProps will use\n// the connect statement gives the component access to redux state and dispatch action calls\n\n\nexport default connect(mapStateToProps, {\n  addTodo,\n  updateTodo,\n  removeTodo,\n  getTodos\n})(TodoList);","map":{"version":3,"sources":["/Users/aaronmacken/Desktop/react-redux-todos/src/TodoList.js"],"names":["React","Component","Todo","NewTodoForm","Route","connect","addTodo","updateTodo","removeTodo","getTodos","TodoList","constructor","props","handleAdd","bind","val","id","todo","render","todos","map","e","ind","task","completed","mapStateToProps","reduxState"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,KAAT,QAAsB,kBAAtB,C,CAEA;AACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,UAA9B,EAA0CC,QAA1C,QAA0D,iBAA1D;;AAGA,MAAMC,QAAN,SAAuBT,SAAvB,CAAiC;AAC7BU,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACH,GAJ4B,CAK7B;AACA;;;AACAD,EAAAA,SAAS,CAACE,GAAD,EAAM;AACX,SAAKH,KAAL,CAAWN,OAAX,CAAmBS,GAAnB;AACH;;AACDP,EAAAA,UAAU,CAACQ,EAAD,EAAK;AACX,SAAKJ,KAAL,CAAWJ,UAAX,CAAsBQ,EAAtB;AACH;;AACDT,EAAAA,UAAU,CAACU,IAAD,EAAO;AACb,SAAKL,KAAL,CAAWL,UAAX,CAAsBU,IAAtB;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAIC,KAAK,GAAG,KAAKP,KAAL,CAAWO,KAAX,CAAiBC,GAAjB,CAAqB,CAACC,CAAD,EAAIC,GAAJ,KAC7B;AACA;AACA,wBAAC,IAAD;AACI,MAAA,UAAU,EAAE,KAAKd,UAAL,CAAgBM,IAAhB,CAAqB,IAArB,EAA2BO,CAAC,CAACL,EAA7B,CADhB;AAEI,MAAA,UAAU,EAAE,KAAKT,UAAL,CAAgBO,IAAhB,CAAqB,IAArB,EAA2BO,CAA3B,CAFhB;AAGI,MAAA,IAAI,EAAEA,CAAC,CAACE,IAHZ;AAGkB,MAAA,GAAG,EAAED,GAHvB;AAG4B,MAAA,SAAS,EAAED,CAAC,CAACG,SAHzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHQ,CAAZ;AAQA,WAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,YAAZ;AAAyB,MAAA,SAAS,EAAEZ,KAAK,IACrC,oBAAC,WAAD,oBAAiBA,KAAjB;AAAwB,QAAA,YAAY,EAAE,KAAKC,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAII,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,QAAlB;AAA2B,MAAA,SAAS,EAAE,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKM,KAAL,CAAL,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CAFJ;AASH;;AAnC4B,C,CAsCjC;AACA;;;AACA,SAASM,eAAT,CAAyBC,UAAzB,EAAqC;AACjC,SAAO;AACHP,IAAAA,KAAK,EAAEO,UAAU,CAACP;AADf,GAAP;AAGH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,eAAed,OAAO,CAACoB,eAAD,EAAkB;AAAEnB,EAAAA,OAAF;AAAWC,EAAAA,UAAX;AAAuBC,EAAAA,UAAvB;AAAmCC,EAAAA;AAAnC,CAAlB,CAAP,CAAwEC,QAAxE,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport Todo from './Todo';\nimport NewTodoForm from './NewTodoForm';\nimport { Route } from 'react-router-dom';\n\n// connect links together the react state & the redux store\n// get action calls from action creator file\nimport { connect } from 'react-redux';\nimport { addTodo, updateTodo, removeTodo, getTodos } from './actionCreator';\n\n\nclass TodoList extends Component {\n    constructor(props) {\n        super(props)\n        this.handleAdd = this.handleAdd.bind(this);\n    }\n    // dispatch calls that reach the redux store\n    // input values are used in the root reducer file to handle logic w/ managing the data\n    handleAdd(val) {\n        this.props.addTodo(val);\n    }\n    removeTodo(id) {\n        this.props.removeTodo(id);\n    }\n    updateTodo(todo) {\n        this.props.updateTodo(todo)\n    }\n\n    render() {\n        let todos = this.props.todos.map((e, ind) => (\n            // passing in removeTodo fn as a prop & binding it to the element that was rendered\n            // while also passing in the element's ID used in the FN\n            <Todo\n                removeTodo={this.removeTodo.bind(this, e.id)}\n                updateTodo={this.updateTodo.bind(this, e)}\n                task={e.task} key={ind} completed={e.completed} />\n        ))\n        return (\n            \n            <div>\n                <Route path=\"/todos/new\" component={props => (\n                    <NewTodoForm {...props} handleSubmit={this.handleAdd} />\n                )}/>\n                <Route exact path=\"/todos\" component={() => <div><ul>{todos}</ul></div>} />\n            </div>\n        )\n    }\n}\n\n// must take in reduxState as a param and return an object\n// the name for the function is arbitrary, but it takes the redux state and maps it to our components props\nfunction mapStateToProps(reduxState) {\n    return {\n        todos: reduxState.todos\n    }\n}\n\n// connecting our component to the redux store defined on the index.js file\n// the REDUX STATE is now available as PROPS for this component\n// now the component has the ability to dispatch actions to the redux store\n// map dispatch to props FN is used for passing in actions for components to dispatch\n// now instead of calling this.props.dispatch and passing in an action,\n// the component has the ability to do: this.props.actionName to dispatch actions\n// the second param takes our actionCreator functions for functions that mapDispatchToProps will use\n\n// the connect statement gives the component access to redux state and dispatch action calls\nexport default connect(mapStateToProps, { addTodo, updateTodo, removeTodo, getTodos })(TodoList);\n\n"]},"metadata":{},"sourceType":"module"}