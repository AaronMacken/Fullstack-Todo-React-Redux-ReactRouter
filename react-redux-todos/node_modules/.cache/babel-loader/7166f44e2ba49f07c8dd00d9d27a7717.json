{"ast":null,"code":"import _defineProperty from \"/Users/aaronmacken/Desktop/react-redux-todos/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// load in the actions from the actionCreator file\nimport { GET_TODOS, ADD_TODO, UPDATE_TODO, REMOVE_TODO } from './actionCreator'; // set the initial redux state of the application\n\nconst initialState = {\n  todos: [] // root reducer function that manages state\n\n};\nexport default function rootReducer(state = initialState, action) {\n  // switch statement based off of action type's value\n  switch (action.type) {\n    case GET_TODOS:\n      return _objectSpread({}, state, {\n        todos: action.data\n      });\n\n    case ADD_TODO:\n      let newAddedState = _objectSpread({}, state);\n\n      return _objectSpread({}, newAddedState, {\n        todos: [...newAddedState.todos, {\n          task: action.task,\n          completed: false\n        }]\n      });\n\n    case UPDATE_TODO:\n      // create a copy of the existing state by mapping through\n      let updatedTodos = state.todos.map(element => {\n        // if the ID's match based off of the passed in element, change that completed state to the opposite \n        // of what it previously was\n        if (element.id === action.todo.id) {\n          element.completed = !element.completed;\n          return element;\n        }\n\n        return element;\n      }); // return the new state object\n\n      return _objectSpread({}, state, {\n        todos: updatedTodos\n      });\n\n    case REMOVE_TODO:\n      let todos = state.todos.filter(val => val._id !== action.id);\n      return _objectSpread({}, state, {\n        todos\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/aaronmacken/Desktop/react-redux-todos/src/rootReducer.js"],"names":["GET_TODOS","ADD_TODO","UPDATE_TODO","REMOVE_TODO","initialState","todos","rootReducer","state","action","type","data","newAddedState","task","completed","updatedTodos","map","element","id","todo","filter","val","_id"],"mappings":";;;;;;AAAA;AACA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,WAA9B,EAA2CC,WAA3C,QAA8D,iBAA9D,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU,CAKrB;;AALqB,CAArB;AAMA,eAAe,SAASC,WAAT,CAAqBC,KAAK,GAAGH,YAA7B,EAA2CI,MAA3C,EAAmD;AAC9D;AACA,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,SAAL;AACI,+BAAWO,KAAX;AAAkBF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAAhC;;AACJ,SAAKT,QAAL;AACI,UAAIU,aAAa,qBAAQJ,KAAR,CAAjB;;AACA,+BACOI,aADP;AAEIN,QAAAA,KAAK,EAAE,CAAC,GAAGM,aAAa,CAACN,KAAlB,EACH;AAAEO,UAAAA,IAAI,EAAEJ,MAAM,CAACI,IAAf;AAAqBC,UAAAA,SAAS,EAAE;AAAhC,SADG;AAFX;;AAKJ,SAAKX,WAAL;AACI;AACA,UAAIY,YAAY,GAAGP,KAAK,CAACF,KAAN,CAAYU,GAAZ,CAAiBC,OAAD,IAAa;AAC5C;AACA;AACA,YAAGA,OAAO,CAACC,EAAR,KAAeT,MAAM,CAACU,IAAP,CAAYD,EAA9B,EAAkC;AAC9BD,UAAAA,OAAO,CAACH,SAAR,GAAoB,CAACG,OAAO,CAACH,SAA7B;AACA,iBAAOG,OAAP;AACH;;AACD,eAAOA,OAAP;AACH,OARkB,CAAnB,CAFJ,CAWI;;AACA,+BACOT,KADP;AAEIF,QAAAA,KAAK,EAAES;AAFX;;AAKJ,SAAKX,WAAL;AACI,UAAIE,KAAK,GAAGE,KAAK,CAACF,KAAN,CAAYc,MAAZ,CAAoBC,GAAG,IAAIA,GAAG,CAACC,GAAJ,KAAYb,MAAM,CAACS,EAA9C,CAAZ;AACA,+BACOV,KADP;AAEIF,QAAAA;AAFJ;;AAKJ;AACI,aAAOE,KAAP;AAnCR;AAqCH","sourcesContent":["// load in the actions from the actionCreator file\nimport { GET_TODOS, ADD_TODO, UPDATE_TODO, REMOVE_TODO } from './actionCreator';\n\n// set the initial redux state of the application\nconst initialState = {\n    todos: []\n}\n\n\n// root reducer function that manages state\nexport default function rootReducer(state = initialState, action) {\n    // switch statement based off of action type's value\n    switch (action.type) {\n        case GET_TODOS: \n            return {...state, todos: action.data}\n        case ADD_TODO:\n            let newAddedState = { ...state };\n            return {\n                ...newAddedState,\n                todos: [...newAddedState.todos, \n                    { task: action.task, completed: false }]\n            }\n        case UPDATE_TODO:\n            // create a copy of the existing state by mapping through\n            let updatedTodos = state.todos.map((element) => {\n                // if the ID's match based off of the passed in element, change that completed state to the opposite \n                // of what it previously was\n                if(element.id === action.todo.id) {\n                    element.completed = !element.completed\n                    return element\n                }\n                return element\n            })\n            // return the new state object\n            return {\n                ...state,\n                todos: updatedTodos\n            }\n\n        case REMOVE_TODO:\n            let todos = state.todos.filter((val => val._id !== action.id))\n            return {\n                ...state,\n                todos\n            }\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}