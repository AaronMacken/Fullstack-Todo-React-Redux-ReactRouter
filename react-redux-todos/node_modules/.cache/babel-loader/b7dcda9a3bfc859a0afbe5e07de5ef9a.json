{"ast":null,"code":"var _jsxFileName = \"/Users/aaronmacken/Desktop/react-redux-todos/src/TodoList.js\";\nimport React, { Component } from 'react';\nimport Todo from './Todo';\nimport { Route } from 'react-router-dom'; // this statement connects our react state with the redux store\n\nimport { connect } from 'react-redux'; // get our action creators from the created file\n\nimport { addTodo, updateTodo, removeTodo } from './actionCreator';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.removeTodo = this.removeTodo.bind(this);\n    this.updateTodo = this.updateTodo.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n  }\n\n  handleAdd(val) {\n    this.props.addTodo(val);\n  } // function that will send the remove todo dispatch with the passed in ID from the bound element\n  // passed in as a prop to the component and used as an on click\n\n\n  removeTodo(id) {\n    this.props.removeTodo(id);\n  }\n\n  updateTodo(todo) {\n    debugger;\n    this.props.updateTodo(todo);\n  } // component now has access to a dispatch prop,\n  // ---- NEXT ----> SEEING HOW TO GET STATE FROM REDUX STORE\n\n\n  render() {\n    let todos = this.props.todos.map((e, ind) => // passing in removeTodo fn as a prop & binding it to the element that was rendered\n    // while also passing in the element's ID used in the FN\n    React.createElement(Todo, {\n      removeTodo: this.removeTodo.bind(this, e.id),\n      updateTodo: this.updateTodo.bind(this, e),\n      task: e.task,\n      key: ind,\n      completed: e.completed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }));\n    return React.createElement(Route, {\n      exact: true,\n      path: \"/todos\",\n      component: () => React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, todos)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    });\n  }\n\n} // must take in reduxState as a param and return an object\n// the name for the function is arbitrary, but it takes the redux state and maps it to our components props\n\n\nfunction mapStateToProps(reduxState) {\n  return {\n    todos: reduxState.todos\n  };\n} // connecting our component to the redux store, the store is defined in the Provider component on the index.js file\n// which defines which store we are connecting to\n// after we are all connected, the REDUX STATE is now available as PROPS for this component\n// now that the component is linked up, it has the ability to dispatch actions to the redux store\n// map dispatch to props FN is used for passing in actions for components to dispatch, available to the component\n// as props\n// now instead of calling this.props.dispatch and passing in an action, you can just use the function names\n// the second param takes our actionCreator functions for functions that mapDispatchToProps will use\n\n\nexport default connect(mapStateToProps, {\n  addTodo,\n  updateTodo,\n  removeTodo\n})(TodoList);","map":{"version":3,"sources":["/Users/aaronmacken/Desktop/react-redux-todos/src/TodoList.js"],"names":["React","Component","Todo","Route","connect","addTodo","updateTodo","removeTodo","TodoList","constructor","props","bind","handleAdd","val","id","todo","render","todos","map","e","ind","task","completed","mapStateToProps","reduxState"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,KAAT,QAAsB,kBAAtB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,UAA9B,QAAgD,iBAAhD;;AACA,MAAMC,QAAN,SAAuBP,SAAvB,CAAiC;AAC7BQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKH,UAAL,GAAkB,KAAKA,UAAL,CAAgBI,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKL,UAAL,GAAkB,KAAKA,UAAL,CAAgBK,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAjB;AACH;;AACDC,EAAAA,SAAS,CAACC,GAAD,EAAM;AACX,SAAKH,KAAL,CAAWL,OAAX,CAAmBQ,GAAnB;AACH,GAT4B,CAU7B;AACA;;;AACAN,EAAAA,UAAU,CAACO,EAAD,EAAK;AACX,SAAKJ,KAAL,CAAWH,UAAX,CAAsBO,EAAtB;AACH;;AAEDR,EAAAA,UAAU,CAACS,IAAD,EAAO;AACb;AACA,SAAKL,KAAL,CAAWJ,UAAX,CAAsBS,IAAtB;AACH,GAnB4B,CAsB7B;AACA;;;AACAC,EAAAA,MAAM,GAAG;AACL,QAAIC,KAAK,GAAG,KAAKP,KAAL,CAAWO,KAAX,CAAiBC,GAAjB,CAAqB,CAACC,CAAD,EAAIC,GAAJ,KAC7B;AACA;AACA,wBAAC,IAAD;AACI,MAAA,UAAU,EAAE,KAAKb,UAAL,CAAgBI,IAAhB,CAAqB,IAArB,EAA2BQ,CAAC,CAACL,EAA7B,CADhB;AAEI,MAAA,UAAU,EAAE,KAAKR,UAAL,CAAgBK,IAAhB,CAAqB,IAArB,EAA2BQ,CAA3B,CAFhB;AAGI,MAAA,IAAI,EAAEA,CAAC,CAACE,IAHZ;AAGkB,MAAA,GAAG,EAAED,GAHvB;AAG4B,MAAA,SAAS,EAAED,CAAC,CAACG,SAHzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHQ,CAAZ;AAQA,WAEI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,QAAlB;AAA2B,MAAA,SAAS,EAAE,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKL,KAAL,CAAL,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAKH;;AAtC4B,C,CAyCjC;AACA;;;AACA,SAASM,eAAT,CAAyBC,UAAzB,EAAqC;AACjC,SAAO;AACHP,IAAAA,KAAK,EAAEO,UAAU,CAACP;AADf,GAAP;AAGH,C,CAID;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;;;AACA,eAAeb,OAAO,CAACmB,eAAD,EAAkB;AAAElB,EAAAA,OAAF;AAAWC,EAAAA,UAAX;AAAuBC,EAAAA;AAAvB,CAAlB,CAAP,CAA8DC,QAA9D,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport Todo from './Todo';\nimport { Route } from 'react-router-dom';\n// this statement connects our react state with the redux store\nimport { connect } from 'react-redux';\n// get our action creators from the created file\nimport { addTodo, updateTodo, removeTodo } from './actionCreator';\nclass TodoList extends Component {\n    constructor(props) {\n        super(props)\n        this.removeTodo = this.removeTodo.bind(this);\n        this.updateTodo = this.updateTodo.bind(this);\n        this.handleAdd = this.handleAdd.bind(this);\n    }\n    handleAdd(val) {\n        this.props.addTodo(val);\n    }\n    // function that will send the remove todo dispatch with the passed in ID from the bound element\n    // passed in as a prop to the component and used as an on click\n    removeTodo(id) {\n        this.props.removeTodo(id);\n    }\n\n    updateTodo(todo) {\n        debugger\n        this.props.updateTodo(todo)\n    }\n\n\n    // component now has access to a dispatch prop,\n    // ---- NEXT ----> SEEING HOW TO GET STATE FROM REDUX STORE\n    render() {\n        let todos = this.props.todos.map((e, ind) => (\n            // passing in removeTodo fn as a prop & binding it to the element that was rendered\n            // while also passing in the element's ID used in the FN\n            <Todo\n                removeTodo={this.removeTodo.bind(this, e.id)}\n                updateTodo={this.updateTodo.bind(this, e)}\n                task={e.task} key={ind} completed={e.completed} />\n        ))\n        return (\n\n            <Route exact path=\"/todos\" component={() => <div><ul>{todos}</ul></div>} />\n\n        )\n    }\n}\n\n// must take in reduxState as a param and return an object\n// the name for the function is arbitrary, but it takes the redux state and maps it to our components props\nfunction mapStateToProps(reduxState) {\n    return {\n        todos: reduxState.todos\n    }\n}\n\n\n\n// connecting our component to the redux store, the store is defined in the Provider component on the index.js file\n// which defines which store we are connecting to\n// after we are all connected, the REDUX STATE is now available as PROPS for this component\n// now that the component is linked up, it has the ability to dispatch actions to the redux store\n\n\n// map dispatch to props FN is used for passing in actions for components to dispatch, available to the component\n// as props\n\n// now instead of calling this.props.dispatch and passing in an action, you can just use the function names\n// the second param takes our actionCreator functions for functions that mapDispatchToProps will use\nexport default connect(mapStateToProps, { addTodo, updateTodo, removeTodo })(TodoList);\n\n"]},"metadata":{},"sourceType":"module"}