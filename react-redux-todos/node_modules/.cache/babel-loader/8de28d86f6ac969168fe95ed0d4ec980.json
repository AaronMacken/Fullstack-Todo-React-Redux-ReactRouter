{"ast":null,"code":"import _defineProperty from \"/Users/aaronmacken/Desktop/react-redux-todos/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// load in the actions from the actionCreator file\nimport { ADD_TODO, UPDATE_TODO, REMOVE_TODO } from './actionCreator'; // set the initial redux state of the application\n\nconst initialState = {\n  todos: [],\n  id: 0 // root reducer function that manages state\n\n};\nexport default function rootReducer(state = initialState, action) {\n  // switch statement based off of action type's value\n  switch (action.type) {\n    // Add\n    // create copy of state\n    // increment copy ID values\n    // return new obj w/ all state contents & a new object who's values come in from the params\n    case ADD_TODO:\n      let newAddedState = _objectSpread({}, state);\n\n      newAddedState.id++;\n      return _objectSpread({}, newAddedState, {\n        todos: [...newAddedState.todos, {\n          task: action.task,\n          id: newAddedState.id,\n          completed: false\n        }]\n      });\n\n    case UPDATE_TODO:\n      // create a copy of the existing state\n      let updatedTodos = state.todos.map(element => {\n        if (element.id === action.element.id) {\n          element.id = !element.id;\n          return element;\n        }\n\n        return element;\n      });\n      console.log(updatedTodos);\n\n    case REMOVE_TODO:\n      let todos = state.todos.filter(val => val.id !== action.id);\n      return _objectSpread({}, state, {\n        todos\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/aaronmacken/Desktop/react-redux-todos/src/rootReducer.js"],"names":["ADD_TODO","UPDATE_TODO","REMOVE_TODO","initialState","todos","id","rootReducer","state","action","type","newAddedState","task","completed","updatedTodos","map","element","console","log","filter","val"],"mappings":";;;;;;AAAA;AACA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,WAAhC,QAAmD,iBAAnD,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,EAAE,EAAE,CAFa,CAMrB;;AANqB,CAArB;AAOA,eAAe,SAASC,WAAT,CAAqBC,KAAK,GAAGJ,YAA7B,EAA2CK,MAA3C,EAAmD;AAC9D;AACA,UAAQA,MAAM,CAACC,IAAf;AACI;AACA;AACA;AACA;AACA,SAAKT,QAAL;AACI,UAAIU,aAAa,qBAAQH,KAAR,CAAjB;;AACAG,MAAAA,aAAa,CAACL,EAAd;AACA,+BACOK,aADP;AAEIN,QAAAA,KAAK,EAAE,CAAC,GAAGM,aAAa,CAACN,KAAlB,EACH;AAAEO,UAAAA,IAAI,EAAEH,MAAM,CAACG,IAAf;AACIN,UAAAA,EAAE,EAAEK,aAAa,CAACL,EADtB;AAEAO,UAAAA,SAAS,EAAE;AAFX,SADG;AAFX;;AAOJ,SAAKX,WAAL;AACI;AACA,UAAIY,YAAY,GAAGN,KAAK,CAACH,KAAN,CAAYU,GAAZ,CAAiBC,OAAD,IAAa;AAC5C,YAAGA,OAAO,CAACV,EAAR,KAAeG,MAAM,CAACO,OAAP,CAAeV,EAAjC,EAAqC;AACjCU,UAAAA,OAAO,CAACV,EAAR,GAAa,CAACU,OAAO,CAACV,EAAtB;AACA,iBAAOU,OAAP;AACH;;AACD,eAAOA,OAAP;AACH,OANkB,CAAnB;AAQAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;;AAEJ,SAAKX,WAAL;AACI,UAAIE,KAAK,GAAGG,KAAK,CAACH,KAAN,CAAYc,MAAZ,CAAoBC,GAAG,IAAIA,GAAG,CAACd,EAAJ,KAAWG,MAAM,CAACH,EAA7C,CAAZ;AACA,+BACOE,KADP;AAEIH,QAAAA;AAFJ;;AAKJ;AACI,aAAOG,KAAP;AAnCR;AAqCH","sourcesContent":["// load in the actions from the actionCreator file\nimport { ADD_TODO, UPDATE_TODO, REMOVE_TODO } from './actionCreator';\n\n// set the initial redux state of the application\nconst initialState = {\n    todos: [],\n    id: 0\n}\n\n\n// root reducer function that manages state\nexport default function rootReducer(state = initialState, action) {\n    // switch statement based off of action type's value\n    switch (action.type) {\n        // Add\n        // create copy of state\n        // increment copy ID values\n        // return new obj w/ all state contents & a new object who's values come in from the params\n        case ADD_TODO:\n            let newAddedState = { ...state };\n            newAddedState.id++;\n            return {\n                ...newAddedState,\n                todos: [...newAddedState.todos, \n                    { task: action.task,\n                        id: newAddedState.id,\n                    completed: false }]\n            }\n        case UPDATE_TODO:\n            // create a copy of the existing state\n            let updatedTodos = state.todos.map((element) => {\n                if(element.id === action.element.id) {\n                    element.id = !element.id\n                    return element\n                }\n                return element\n            })\n\n            console.log(updatedTodos);\n\n        case REMOVE_TODO:\n            let todos = state.todos.filter((val => val.id !== action.id))\n            return {\n                ...state,\n                todos\n            }\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}