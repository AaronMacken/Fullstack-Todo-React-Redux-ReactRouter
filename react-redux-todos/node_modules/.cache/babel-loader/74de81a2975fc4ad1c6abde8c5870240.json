{"ast":null,"code":"var _jsxFileName = \"/Users/aaronmacken/Desktop/react-redux-todos/src/TodoList.js\";\nimport React, { Component } from 'react';\nimport Todo from './Todo'; // this statement connects our react state with the redux store\n\nimport { connect } from 'react-redux';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      task: \"\"\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault(); // dispatch the state value from the input box & reset the input box\n\n    this.props.dispatch({\n      type: \"ADD_TODO\",\n      task: this.state.task\n    });\n    this.setState({\n      task: \"\"\n    });\n  }\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  } // function that will send the remove todo dispatch with the passed in ID from the bound element\n  // passed in as a prop to the component and used as an on click\n\n\n  removeTodo(id) {\n    this.props.dispatch({\n      type: \"REMOVE_TODO\",\n      id\n    });\n  } // component now has access to a dispatch prop,\n  // ---- NEXT ----> SEEING HOW TO GET STATE FROM REDUX STORE\n\n\n  render() {\n    let todos = this.props.todos.map((e, ind) => // passing in removeTodo fn as a prop & binding it to the element that was rendered\n    // while also passing in the element's ID used in the FN\n    React.createElement(Todo, {\n      removeTodo: this.removeTodo.bind(e.id),\n      task: e.task,\n      key: ind,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"task\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Enter a task: \"), React.createElement(\"input\", {\n      type: \"text\",\n      autoComplete: \"off\",\n      required: true,\n      name: \"task\",\n      id: \"task\",\n      value: this.state.task,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Add a task!\")), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, todos));\n  }\n\n} // must take in reduxState as a param and return an object\n// the name for the function is arbitrary, but it takes the redux state and maps it to our components props\n\n\nfunction mapStateToProps(reduxState) {\n  return {\n    todos: reduxState.todos\n  };\n} // connecting our component to the redux store, the store is defined in the Provider component on the index.js file\n// which defines which store we are connecting to\n// after we are all connected, the REDUX STATE is now available as PROPS for this component\n// now that the component is linked up, it has the ability to dispatch actions to the redux store\n\n\nexport default connect(mapStateToProps)(TodoList);","map":{"version":3,"sources":["/Users/aaronmacken/Desktop/react-redux-todos/src/TodoList.js"],"names":["React","Component","Todo","connect","TodoList","constructor","props","state","task","handleSubmit","bind","handleChange","removeTodo","e","preventDefault","dispatch","type","setState","target","name","value","id","render","todos","map","ind","mapStateToProps","reduxState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Todo from './Todo';\n\n// this statement connects our react state with the redux store\nimport { connect } from 'react-redux';\n\nclass TodoList extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            task: \"\"\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.removeTodo = this.removeTodo.bind(this);\n    }\n    handleSubmit(e) {\n        e.preventDefault();\n        // dispatch the state value from the input box & reset the input box\n        this.props.dispatch({\n            type: \"ADD_TODO\",\n            task: this.state.task\n        })\n\n        this.setState({\n           task: \"\"\n        })\n    }\n    handleChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n\n    }\n\n    // function that will send the remove todo dispatch with the passed in ID from the bound element\n    // passed in as a prop to the component and used as an on click\n    removeTodo(id) {\n        this.props.dispatch({\n            type: \"REMOVE_TODO\",\n            id\n        })\n    }\n\n\n    // component now has access to a dispatch prop,\n    // ---- NEXT ----> SEEING HOW TO GET STATE FROM REDUX STORE\n    render() {\n        let todos = this.props.todos.map((e, ind) => (\n            // passing in removeTodo fn as a prop & binding it to the element that was rendered\n            // while also passing in the element's ID used in the FN\n            <Todo removeTodo={this.removeTodo.bind(e.id)} task={e.task} key={ind} />\n        ))\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <label htmlFor=\"task\">Enter a task: </label>\n                    <input type=\"text\" autoComplete=\"off\" required name=\"task\" id=\"task\" value={this.state.task} onChange={this.handleChange}></input>\n                    <button type=\"submit\">Add a task!</button>\n                </form>\n                <ul>\n                    {todos}\n                </ul>\n\n            </div>\n        )\n    }\n}\n\n// must take in reduxState as a param and return an object\n// the name for the function is arbitrary, but it takes the redux state and maps it to our components props\nfunction mapStateToProps(reduxState) {\n    return {\n        todos: reduxState.todos\n    }\n}\n\n// connecting our component to the redux store, the store is defined in the Provider component on the index.js file\n// which defines which store we are connecting to\n// after we are all connected, the REDUX STATE is now available as PROPS for this component\n// now that the component is linked up, it has the ability to dispatch actions to the redux store\nexport default connect(mapStateToProps)(TodoList);\n\n"]},"metadata":{},"sourceType":"module"}